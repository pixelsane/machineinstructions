import raylib, stack
const 
  MachineExitPos = 650
  MachineEntryPos = 0
  EmbedEntryPos = 500
  EmbedExitPos = 650
  GoX  = 0
  CcwX = 93
  CwX = 186

type EVector2 = object
  x: float32
  y: float32
  dir: int


var
  embeds*: Stack
  unusedEmbeds*: Stack
  embedsLTexture: Texture2D
  embedsRTexture: Texture2D
  machineTexture: Texture2D
  machinePos: Vector2
  showMachine*: bool
  embedSlots: array[10, EVector2] = [
    EVector2(x: 50, y: 219, dir: 0),
    EVector2(x: 140, y: 219, dir: 0),
    EVector2(x: 220, y: 219, dir: 0),
    EVector2(x: 302, y: 219, dir: 1),
    EVector2(x: 378, y: 219, dir: 1),
    EVector2(x: 53, y: 268, dir: 0),
    EVector2(x: 135, y: 268, dir: 0),
    EVector2(x: 218, y: 268, dir: 0),
    EVector2(x: 308, y: 268, dir: 1),
    EVector2(x: 392, y: 268, dir: 1)
  ]

var 
  easeOut: float32 = 1
  easeIn: float32 = 1
  rightBar = Rectangle(x: EmbedExitPos, y: 2, width: 93, height: 48)
  hoveringOn : int

proc displayUnusedEmbeds =
  hoveringOn = -1

  for i , embed in unusedEmbeds:

    let 
      maxItems = unusedEmbeds.len
      maxHeight = 400.0
      spacing = 10.0
      itemHeight = 48.0
      origin = Vector2(x: 0, y: 0)
      mousePos = getMousePosition()


      yOffset =
        if maxItems > 0:
          min(itemHeight + (spacing - float32(unusedEmbeds.len)), maxHeight / float(maxItems))
        else:
          itemHeight + spacing

    var
      src = Rectangle(x: 0, y:0, width: 93, height: 48)
      dest = rightBar



    dest.y = dest.y + float32(i) * yOffset

    let onHover = mousePos.x > dest.x and 
    mousePos.y > dest.y and
    mousePos.x < dest.x + dest.width and
    mousePos.y < dest.y + dest.height

    case embed.kind
    of Go: src.x = GoX
    of TurnCCW: src.x = CcwX
    of TurnCW: src.x = CwX

    if onHover:
      dest.x -= 5
      hoveringOn = i
      drawTexture(embedsLTexture, src, dest, origin, 0.0, YELLOW)
    else:
      drawTexture(embedsLTexture, src, dest, origin, 0.0, WHITE)
      
var hoveringOnU: int
proc displayUsedEmbeds =
  hoveringOnU = -1
  let 
    mousePos = getMousePosition()
    origin = Vector2(x:0, y: 0)

  for i, embed in embeds:
    var 
      color: Color
      src = Rectangle(x: 0, y: 0, width: 93, height: 48)
    let dest = Rectangle(
      x: embedSlots[i].x, y: embedSlots[i].y,
      width: 93, height: 48
    )

    let onHover = mousePos.x > dest.x and 
    mousePos.y > dest.y and
    mousePos.x < dest.x + dest.width and
    mousePos.y < dest.y + dest.height

    if onHover: 
      color = YELLOW
      hoveringOnU = i
    else: color = WHITE

    case embed.kind
    of Go: src.x = GoX
    of TurnCCW: src.x = CcwX
    of TurnCW: src.x = CwX
    if embedSlots[i].dir == 0:
        drawTexture(embedsRTexture, src, dest, origin, 0.0, color)
    else:
      drawTexture(embedsLTexture, src, dest, origin, 0.0, color)
  
proc displayEmbeds =
  displayUnusedEmbeds()
  displayUsedEmbeds()


proc updateEmbeds =
  if isMouseButtonPressed(LEFT) and hoveringOn > -1 and embeds.len < 10:
    embeds.add unusedEmbeds[hoveringOn]
    delete(unusedEmbeds, hoveringOn)

  if isMouseButtonPressed(LEFT) and hoveringOnU > -1:
    unusedEmbeds.add embeds[hoveringOnU]
    delete(embeds, hoveringOnU)


proc drawMachine* =
  drawTexture(machineTexture, machinePos, WHITE)
  displayEmbeds()

proc updateMachine* =
  const easingMult = 0.15
  if showMachine:
    if machinePos.x > MachineEntryPos:
      machinePos.x -= getFrameTime() * easeIn
      machinePos.x = max(machinePos.x, MachineEntryPos)
      rightBar.x -= getFrameTime() * (easeIn / 4)
      rightBar.x = max(rightBar.x, EmbedEntryPos)
      easeIn += easeIn * easingMult
    else: easeIn = 1
  else:
    if machinePos.x < MachineExitPos:
      machinePos.x += getFrameTime() * easeOut
      machinePos.x = max(machinePos.x, MachineExitPos)
      rightBar.x += getFrameTime() * easeIn
      rightBar.x = max(rightBar.x, EmbedExitPos)
      easeOut += easeOut * easingMult
    else: easeOut = 1

  updateEmbeds()

proc initMachine* =
  machineTexture = loadTexture("res/machine.png")
  embedsLTexture = loadTexture("res/embedLeft.png")
  embedsRTexture = loadTexture("res/embedRight.png")
  machinePos.x = MachineExitPos
